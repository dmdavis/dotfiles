#!/usr/bin/env zsh

HISTSIZE=10000
SAVEHIST=10000

setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Environment
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -f /etc/lsb-release ]; then
    OS=$(lsb_release -s -d)
elif [ -f /etc/debian_version ]; then
    OS="Debian $(cat /etc/debian_version)"
elif [ -f /etc/redhat-release ]; then
    OS=`cat /etc/redhat-release`
else
    OS="$(uname -s) $(uname -r)"
fi

if [[ "$OS" == Darwin* ]]; then
    export BREWFILE_PATH="$HOME/.files/homebrew/brewfile-osx"
    export PATH="/usr/local/sbin:$PATH"
else
    export BREWFILE_PATH="$HOME/.files/homebrew/brewfile-linux"
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
fi

export DOTFILES="$HOME/.files"
export DEFAULT_USER=`whoami`
export HOSTNAME=`hostname -s`
export TERM='xterm-256color'
export ZSH_PLUGINS_ALIAS_TIPS_TEXT="Alias: "
export PROJECT_HOME="$HOME/Source"

if [[ ! -d "$HOME/.nvm" ]]; then
    mkdir "$HOME/.nvm"
fi
export NVM_DIR="$HOME/.nvm"

if [[ -d "$HOME/.linuxbrew" ]]; then
    export PATH="$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH"
    export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
    export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    SESSION_TYPE=remote/ssh
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) SESSION_TYPE=remote/ssh;;
    esac
fi

# Set window/tab title
function title {
    echo -ne "\e]1;$1\a"
}

# Set iTerm3 badge
if [[ "$OS" == Darwin* ]]; then
    badge() {
        printf "\e]1337;SetBadgeFormat=%s\a" \
            $(echo -n "$1" | base64)
    }
else
    alias badge=''
fi

# Set (ba)dge and (t)itle
if [[ "$SESSION_TYPE" == remote/ssh ]]; then
    alias bat=''
else
    function bat() {
        local msg=$1
        title $msg && badge $msg
    }
fi

source "$DOTFILES/zgen/zgen.zsh"
if ! zgen saved; then
    print "Creating a zgen save"
    zgen prezto '*:*' case-sensitive 'yes'
	  zgen prezto '*:*' color 'yes'
    zgen prezto tmux auto-start local 'yes'
    zgen prezto tmux auto-start remote 'yes'
    zgen prezto tmux iterm integrate 'yes'
    zgen prezto
    zgen prezto 'environment'
    zgen prezto 'terminal'
    zgen prezto 'editor'
    zgen prezto 'history'
    zgen prezto 'spectrum'
    zgen prezto 'utility'
    zgen prezto 'completion'
    zgen prezto 'archive'
    zgen prezto 'terminal'
    zgen prezto 'fasd'
    zgen prezto 'rsync'
    zgen prezto 'git'
    zgen prezto 'ssh'
    zgen prezto 'ruby'
    zgen prezto 'node'
    # zgen prezto 'python'
    # zgen prezto 'tmux' ## When current changes have stabilized
    # python, node, and perl are on you
    if [[ "$OS" == Darwin* ]]; then
        zgen prezto 'osx'
        zgen prezto 'homebrew'
        zgen oh-my-zsh plugins/osx
        zgen load "$DOTFILES/homebrew"
        zgen load "$DOTFILES/osx"
    elif [[ "$OS" == Fedora* ]]; then
        zgen prezto 'yum'
    else  # Debian, Ubuntu, Linux Mint, and other apt-based distros
        zgen prezto 'dpkg'
        zgen prezto 'homebrew'
        zgen prezto 'command-not-found'
        zgen load "$DOTFILES/dpkg"
        zgen load "$DOTFILES/homebrew"
    fi
    zgen oh-my-zsh plugins/cp
    zgen oh-my-zsh plugins/colorize
    zgen oh-my-zsh plugins/emoji-clock
    zgen oh-my-zsh plugins/rand-quote
    zgen oh-my-zsh plugins/fabric
    zgen oh-my-zsh plugins/vagrant
    zgen oh-my-zsh plugins/perl
    zgen oh-my-zsh plugins/cpanm
    zgen oh-my-zsh plugins/rbenv
    zgen oh-my-zsh plugins/textmate
    zgen load jocelynmallon/zshmarks
    zgen load Tarrasch/zsh-autoenv
    zgen load djui/alias-tips
    zgen load "$DOTFILES/fonts"
    zgen load "$DOTFILES/powertools"  # Must come after $DOTFILES/fonts
    zgen load bhilburn/powerlevel9k powerlevel9k
    zgen prezto 'tmux'
    zgen prezto 'syntax-highlighting'
    zgen prezto 'history-substring-search'
    zgen prezto 'prompt'
    zgen save
fi
# Probably prefer oh-my-zsh plenv or personal to prezto/perl

source "$DOTFILES/ssh/ssh.plugin.zsh"
source "$DOTFILES/git/git.plugin.zsh"
source "$DOTFILES/python/python.plugin.zsh"
source "$DOTFILES/pyenv/pyenv.plugin.zsh"
source "$DOTFILES/vim/vim.plugin.zsh"
source "$DOTFILES/perl/perl.plugin.zsh"
source "$DOTFILES/role/role.plugin.zsh"

# date
alias gmt="date -u"
alias utc='date -u'

# cd/fasd
alias cd..='cd ..'
alias cd...='cd ...'
alias j='fasd_cd -d'

# ls
alias dir=ls
alias l='ls -CF'
alias lla="ll -a"
alias lld='ls -ld */'

# find/grep
alias fsize='du -ch | grep total'
alias hig='history 1 | grep'
alias ack=ag
alias alf='alias | fzf'
alias alg='alias | grep'

# ruby
alias lsr="rbenv versions"

# copy/paste
alias pwdc="pwd | pbcopy"

# colorize/cat
alias ct='colorize'

# tmux
alias tls='tmux ls'

# docker
alias dm='docker-machine'
alias dmc='docker-machine create --driver virtualbox'

if [[ -f /etc/lsb-release ]]; then
    alias sysinfo='inxi -Fxz'
fi

function fix-insecure-compinit() {
    compaudit | xargs chmod g-w
}

# Conversion
function b2d() {
    echo $((2#$1))
}

function o2d() {
    echo $((8#$1))
}

function h2d() {
    echo $((16#$1))
}

# Search
function fid {
    find . -name $1 -print
}

# Recursive deletion of glob
function rmr {
    find . -name "$1" -exec rm '{}' ';'
}

function sane {
    echo "$FG[green]  [$1]$FG[none]"
    "$1" versions | sed "s/\*/$fg[green]&$fg[default]/g"
    "$1" rehash
}

function sanity {
    sane pyenv
    sane rbenv
    sane plenv
    echo
    echo "$FG[green]         [nvm]$FG[none]"
    nvm ls
}

# git fetch (and rebase) .files
function gff {
    git -C "$DOTFILES" up
}

_wt() {
    printf "$1$(date +"%I:%M %p")  $(emoji-clock)\n"
}

# Current time at various locations
function wt {
    echo
    echo "$fg[blue]====== Current Times ======$fg[default]"
    echo
    export TZ=US/Pacific
    _wt "San Jose:      "
    export TZ=America/Phoenix
    _wt "Phoenix:       "
    export TZ=US/Mountain
    _wt "Boise:         "
    _wt "Silver City:   "
    export TZ=US/Central
    _wt "Austin:        "
    export TZ=America/Toronto
    _wt "Toronto, CA:   "
    export TZ=UTC
    _wt "UTC:           "
    export TZ=Europe/Berlin
    _wt "Karlsruhe, DE: "
    export TZ=Asia/Kolkata
    _wt "Bangalore, IN: "
    # Don't forget to reset to local
    export TZ=US/Pacific
    echo
    echo "$fg[blue]===========================$fg[default]"
}

function upall {
    echo "$fg[blue][Updating zplug ZSH plugin framework]$fg[default]"
    zplug update
    if [[ -d $HOME/.vim/janus ]]; then
        echo "$fg[blue][Updating Janus VIM distribution]$fg[default]"
        jvu
    fi
    # TODO Add Python, Ruby, Perl, apt, brew, node, app store
}

# Show all 255 terminal colors and their codes
show-colors() {
    for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done
}

if (( $+commands[fuck] )); then
    eval $(thefuck --alias)
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
